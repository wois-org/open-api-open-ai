defmodule OpenAi.AuditLog do
  @moduledoc """
  Provides struct and type for a AuditLog
  """

  @type t :: %__MODULE__{
          actor: OpenAi.AuditLog.Actor.t(),
          "api_key.created": OpenAi.AuditLog.ApiKey.Created.t() | nil,
          "api_key.deleted": OpenAi.AuditLog.ApiKey.Deleted.t() | nil,
          "api_key.updated": OpenAi.AuditLog.ApiKey.Updated.t() | nil,
          "certificate.created": OpenAi.AuditLog.Certificate.Created.t() | nil,
          "certificate.deleted": OpenAi.AuditLog.Certificate.Deleted.t() | nil,
          "certificate.updated": OpenAi.AuditLog.Certificate.Updated.t() | nil,
          "certificates.activated": OpenAi.AuditLog.Certificate.Activated.t() | nil,
          "certificates.deactivated": OpenAi.AuditLog.Certificate.Deactivated.t() | nil,
          "checkpoint_permission.created": OpenAi.AuditLog.CheckpointPermission.Created.t() | nil,
          "checkpoint_permission.deleted": OpenAi.AuditLog.CheckpointPermission.Deleted.t() | nil,
          effective_at: integer,
          id: String.t(),
          "invite.accepted": OpenAi.AuditLog.Invite.Accepted.t() | nil,
          "invite.deleted": OpenAi.AuditLog.Invite.Deleted.t() | nil,
          "invite.sent": OpenAi.AuditLog.Invite.Sent.t() | nil,
          "login.failed": OpenAi.AuditLog.LoginFailed.t() | nil,
          "logout.failed": OpenAi.AuditLog.LogoutFailed.t() | nil,
          "organization.updated": OpenAi.AuditLog.Organization.Updated.t() | nil,
          project: OpenAi.AuditLog.Project.t() | nil,
          "project.archived": OpenAi.AuditLog.Project.Archived.t() | nil,
          "project.created": OpenAi.AuditLog.Project.Created.t() | nil,
          "project.updated": OpenAi.AuditLog.Project.Updated.t() | nil,
          "rate_limit.deleted": OpenAi.AuditLog.RateLimit.Deleted.t() | nil,
          "rate_limit.updated": OpenAi.AuditLog.RateLimit.Updated.t() | nil,
          "service_account.created": OpenAi.AuditLog.ServiceAccount.Created.t() | nil,
          "service_account.deleted": OpenAi.AuditLog.ServiceAccount.Deleted.t() | nil,
          "service_account.updated": OpenAi.AuditLog.ServiceAccount.Updated.t() | nil,
          type: String.t(),
          "user.added": OpenAi.AuditLog.User.Added.t() | nil,
          "user.deleted": OpenAi.AuditLog.User.Deleted.t() | nil,
          "user.updated": OpenAi.AuditLog.User.Updated.t() | nil
        }

  defstruct [
    :actor,
    :"api_key.created",
    :"api_key.deleted",
    :"api_key.updated",
    :"certificate.created",
    :"certificate.deleted",
    :"certificate.updated",
    :"certificates.activated",
    :"certificates.deactivated",
    :"checkpoint_permission.created",
    :"checkpoint_permission.deleted",
    :effective_at,
    :id,
    :"invite.accepted",
    :"invite.deleted",
    :"invite.sent",
    :"login.failed",
    :"logout.failed",
    :"organization.updated",
    :project,
    :"project.archived",
    :"project.created",
    :"project.updated",
    :"rate_limit.deleted",
    :"rate_limit.updated",
    :"service_account.created",
    :"service_account.deleted",
    :"service_account.updated",
    :type,
    :"user.added",
    :"user.deleted",
    :"user.updated"
  ]

  @doc false
  @spec __fields__(atom) :: keyword
  def __fields__(type \\ :t)

  def __fields__(:t) do
    [
      actor: {OpenAi.AuditLog.Actor, :t},
      "api_key.created": {OpenAi.AuditLog.ApiKey.Created, :t},
      "api_key.deleted": {OpenAi.AuditLog.ApiKey.Deleted, :t},
      "api_key.updated": {OpenAi.AuditLog.ApiKey.Updated, :t},
      "certificate.created": {OpenAi.AuditLog.Certificate.Created, :t},
      "certificate.deleted": {OpenAi.AuditLog.Certificate.Deleted, :t},
      "certificate.updated": {OpenAi.AuditLog.Certificate.Updated, :t},
      "certificates.activated": {OpenAi.AuditLog.Certificate.Activated, :t},
      "certificates.deactivated": {OpenAi.AuditLog.Certificate.Deactivated, :t},
      "checkpoint_permission.created": {OpenAi.AuditLog.CheckpointPermission.Created, :t},
      "checkpoint_permission.deleted": {OpenAi.AuditLog.CheckpointPermission.Deleted, :t},
      effective_at: :integer,
      id: {:string, :generic},
      "invite.accepted": {OpenAi.AuditLog.Invite.Accepted, :t},
      "invite.deleted": {OpenAi.AuditLog.Invite.Deleted, :t},
      "invite.sent": {OpenAi.AuditLog.Invite.Sent, :t},
      "login.failed": {OpenAi.AuditLog.LoginFailed, :t},
      "logout.failed": {OpenAi.AuditLog.LogoutFailed, :t},
      "organization.updated": {OpenAi.AuditLog.Organization.Updated, :t},
      project: {OpenAi.AuditLog.Project, :t},
      "project.archived": {OpenAi.AuditLog.Project.Archived, :t},
      "project.created": {OpenAi.AuditLog.Project.Created, :t},
      "project.updated": {OpenAi.AuditLog.Project.Updated, :t},
      "rate_limit.deleted": {OpenAi.AuditLog.RateLimit.Deleted, :t},
      "rate_limit.updated": {OpenAi.AuditLog.RateLimit.Updated, :t},
      "service_account.created": {OpenAi.AuditLog.ServiceAccount.Created, :t},
      "service_account.deleted": {OpenAi.AuditLog.ServiceAccount.Deleted, :t},
      "service_account.updated": {OpenAi.AuditLog.ServiceAccount.Updated, :t},
      type:
        {:enum,
         [
           "api_key.created",
           "api_key.updated",
           "api_key.deleted",
           "checkpoint_permission.created",
           "checkpoint_permission.deleted",
           "invite.sent",
           "invite.accepted",
           "invite.deleted",
           "login.succeeded",
           "login.failed",
           "logout.succeeded",
           "logout.failed",
           "organization.updated",
           "project.created",
           "project.updated",
           "project.archived",
           "service_account.created",
           "service_account.updated",
           "service_account.deleted",
           "rate_limit.updated",
           "rate_limit.deleted",
           "user.added",
           "user.updated",
           "user.deleted"
         ]},
      "user.added": {OpenAi.AuditLog.User.Added, :t},
      "user.deleted": {OpenAi.AuditLog.User.Deleted, :t},
      "user.updated": {OpenAi.AuditLog.User.Updated, :t}
    ]
  end
end
